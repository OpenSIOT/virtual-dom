{"version":3,"sources":["vdom/createElement.js","vdom/render.js","vdom/mount.js","vdom/diff.js","main.js"],"names":["tagName","attrs","children","vElem","Object","create","assign","renderElem","$el","document","createElement","entries","k","v","setAttribute","child","appendChild","render","vNode","createTextNode","$node","$target","replaceWith","zip","xs","ys","zipped","i","Math","min","length","push","diffAttrs","oldAttrs","newAttrs","patches","entires","removeAttribute","patch","diffChildren","oldVChildren","newVChildren","childPatches","forEach","oldVChild","diff","additionalPatches","slic","additionalVChild","$parent","childNodes","$child","oldVTree","newVTree","undefined","remove","$Node","$newNode","patchAttrs","patchChildren","createVApp","count","id","dataCount","String","Array","from","src","vApp","$app","$rootEl","getElementById","setInterval","n","floor","math","random","vNewApp"],"mappings":"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","file":"main.1f19ae8e.map","sourceRoot":"../src","sourcesContent":["/*export default (tagName, { attrs = {}, children = [] } = {}) => {\n    return{\n        tagName,\n        attrs,\n        children,\n    };\n};\n\n*/\n\n//Making the DOM purer using the Object.create(null)\n//This creates a truly plain object that doesn't inherit from Object but null instead\n\nexport default (tagName, { attrs = {}, children = [] } = {}) => {\n    const vElem = Object.create(null);\n\n    Object.assign(vElem, {\n        tagName,\n        attrs,\n        children,\n    });\n    \n    return vElem;\n};","const renderElem = ({tagName, attrs, children}) => {\n\n    //Element creation\n    const $el = document.createElement(tagName);\n\n    //Adding all the attributes attributed to vNode.attrs\n    //eg. <div id=\"app\"></div>\n\n    for (const [k, v] of Object.entries(attrs)){\n        $el.setAttribute(k, v);\n    }\n\n    //append all children as specified in vNode.children\n    //eg. <div id=\"app\"><img><div>\n\n    for (const child of children) {\n        $el.appendChild(render(child));\n    }\n\n    return $el;\n\n};\n\n\nconst render = (vNode) => {\n    if (typeof vNode === 'string'){\n        return document.createTextNode(vNode);\n    }\n\n    return renderElem(vNode);\n};\n\n\nexport default render;","export default ($node, $target) => {\n    $target.replaceWith($node);\n    return $node;\n};","import render from './render';\n\n\n\nconst zip = (xs, ys) => {\n    const zipped = [];\n    for (let i = 0; i < Math.min(xs.length, ys.length); i++){\n        zipped.push(xs[i], ys[i]);\n    }\n\n    return zipped;\n};\n\nconst diffAttrs = (oldAttrs, newAttrs) => {\n    const patches = [];\n\n    //setting newAttrs\n    for (const [k, v] of Object.entires(newAttrs)){\n        patches.push($node => {\n            $node.setAttribute(k, v);\n            return $node\n        });\n    }\n\n    // removing attrs\n    for (const k in oldAttrs){\n        if(!(k in newAttrs)){\n            patches.push($node => {\n                $node.removeAttribute(k);\n                return $node;\n            });\n        }\n    }\n\n\n\n    return $node => {\n        for (const patch of patches){\n            patch($node);\n        }\n        return $node;\n    };\n};\n\n\nconst diffChildren = (oldVChildren, newVChildren) => {\n    const childPatches = [];\n\n    oldVChildren.forEach((oldVChild, i) => {\n        childPatches,push(diff(oldVChild, newVChildren[i]));        \n    });\n\n\n    const additionalPatches = [];\n    for (const additionalVChild of newVChildren.slic(oldVChildren.length)){\n        additionalPatches.push($node => {\n            $node.appendChild(render(newVChildren));\n            return $node;\n        });\n    }\n\n    return $parent => {\n        $parent.childNodes.forEach(($child, i) => {\n            childPatches[i]($child);\n        });\n\n        for (const patch of additionalPatches){\n            patch($parent);\n        }\n\n        return $parent;\n    };\n    /*return $node => {\n        return $node;\n    };\n\n    */\n};\n\nconst diff = (oldVTree, newVTree) => {\n    //assume oldVTree is not defined\n    if (newVTree === undefined){\n        return $node => {\n            $node.remove();\n            //The patch returns the new root node, since there is none in case undefined is returned\n            return undefined;\n        }\n    }\n\n    if (typeof oldVTree === 'string' || typeof newVTree == 'string'){\n        if (oldVTree !== newVTree){\n            //2 cases are existent here\n            //1. both trees are string and they have different values\n            //2. one of the trees is text node and the other one is elem node\n            // Either case render(newVTree)\n            return $Node => {\n                const $newNode = render(newVTree);\n                $node.replaceWith($newNode);\n                return $newNode;\n            };\n        } else{\n            //both trees are strings and they have the same values\n            return $node => $node;\n        }\n    }\n\n    if (oldVTree.tagName !== newVTree.tagName){\n        //assume that they are totally different\n        return $node => {\n            const $newNode = render(newVTree);\n            $node.replaceWith($newNode);\n            return $newNode;\n        };\n    }\n\n\n    const patchAttrs = diffAttrs(oldVTree.attrs, newVTree.attrs);\n    const patchChildren = diffChildren(oldVTree.children, newVTree.children);\n\n    return $node => {\n        patchAttrs($node);\n        patchChildren($node);\n        return $node;\n    };\n};\n\nexport default diff;","import createElement from './vdom/createElement';\nimport render from './vdom/render';\nimport mount from './vdom/mount';\nimport diff from './vdom/diff';\n\n\nconst createVApp = count => createElement('div', {\n    attrs: {\n        id: 'app',\n        dataCount: count,\n    },\n    children: [\n        'The current count is: ', //represents TextNode\n        String(count),\n        ...Array.from( { length:count }, () =>createElement('img', {\n            attrs: {\n                src: 'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif',\n            },\n        })), //represents Element Node\n    ],\n}); //represent Element Node\n\n/*const vApp = {\n    tagName: 'div',\n    attrs: {\n        id: 'app',\n    },\n};\n*/\n\nlet count = 0;\nconst vApp = createVApp(count);\nconst $app = render(vApp);\nlet $rootEl = mount($app, document.getElementById('app'));\n\nsetInterval(() => {\n    //count++;\n    const n = Math.floor(math.random() * 10);\n    const vNewApp = createVApp(count);\n    const patch = diff(vApp, vNewApp);\n\n\n    //$rootEl = mount(render(createVApp(count)), $rootEl);\n\n    $rootEl = patch($rootEl);\n    \n    vApp = vNewApp;\n}, 1000);\n\n//console.log($app);\n\n//Mount $app to the empty div\n//mount($app, document.getElementById('app'));\n\n\n\n\n"]}